/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardTransactionsRouteImport } from './routes/dashboard/transactions'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardIncomeRouteImport } from './routes/dashboard/income'
import { Route as DashboardHelpsRouteImport } from './routes/dashboard/helps'
import { Route as DashboardExpensesRouteImport } from './routes/dashboard/expenses'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'

const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardTransactionsRoute = DashboardTransactionsRouteImport.update({
  id: '/dashboard/transactions',
  path: '/dashboard/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/dashboard/settings',
  path: '/dashboard/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIncomeRoute = DashboardIncomeRouteImport.update({
  id: '/dashboard/income',
  path: '/dashboard/income',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardHelpsRoute = DashboardHelpsRouteImport.update({
  id: '/dashboard/helps',
  path: '/dashboard/helps',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardExpensesRoute = DashboardExpensesRouteImport.update({
  id: '/dashboard/expenses',
  path: '/dashboard/expenses',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/expenses': typeof DashboardExpensesRoute
  '/dashboard/helps': typeof DashboardHelpsRoute
  '/dashboard/income': typeof DashboardIncomeRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/expenses': typeof DashboardExpensesRoute
  '/dashboard/helps': typeof DashboardHelpsRoute
  '/dashboard/income': typeof DashboardIncomeRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pricing': typeof PricingRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/dashboard/expenses': typeof DashboardExpensesRoute
  '/dashboard/helps': typeof DashboardHelpsRoute
  '/dashboard/income': typeof DashboardIncomeRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pricing'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/expenses'
    | '/dashboard/helps'
    | '/dashboard/income'
    | '/dashboard/settings'
    | '/dashboard/transactions'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pricing'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/expenses'
    | '/dashboard/helps'
    | '/dashboard/income'
    | '/dashboard/settings'
    | '/dashboard/transactions'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/pricing'
    | '/auth/signin'
    | '/auth/signup'
    | '/dashboard/expenses'
    | '/dashboard/helps'
    | '/dashboard/income'
    | '/dashboard/settings'
    | '/dashboard/transactions'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PricingRoute: typeof PricingRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  DashboardExpensesRoute: typeof DashboardExpensesRoute
  DashboardHelpsRoute: typeof DashboardHelpsRoute
  DashboardIncomeRoute: typeof DashboardIncomeRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardTransactionsRoute: typeof DashboardTransactionsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/transactions': {
      id: '/dashboard/transactions'
      path: '/dashboard/transactions'
      fullPath: '/dashboard/transactions'
      preLoaderRoute: typeof DashboardTransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/dashboard/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/income': {
      id: '/dashboard/income'
      path: '/dashboard/income'
      fullPath: '/dashboard/income'
      preLoaderRoute: typeof DashboardIncomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/helps': {
      id: '/dashboard/helps'
      path: '/dashboard/helps'
      fullPath: '/dashboard/helps'
      preLoaderRoute: typeof DashboardHelpsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/expenses': {
      id: '/dashboard/expenses'
      path: '/dashboard/expenses'
      fullPath: '/dashboard/expenses'
      preLoaderRoute: typeof DashboardExpensesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PricingRoute: PricingRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  DashboardExpensesRoute: DashboardExpensesRoute,
  DashboardHelpsRoute: DashboardHelpsRoute,
  DashboardIncomeRoute: DashboardIncomeRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardTransactionsRoute: DashboardTransactionsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
